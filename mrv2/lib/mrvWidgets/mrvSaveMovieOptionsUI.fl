# data file for the Fltk User Interface Designer (fluid)
version 1.0400
i18n_type 1
i18n_include {<libintl.h>}
i18n_conditional {}
i18n_gnu_function gettext
i18n_gnu_static_function gettext_noop
header_name {.h}
code_name {.cxx}
decl {\#include <string>} {public global
}

decl {\#include <filesystem>} {public global
}

decl {namespace fs = std::filesystem;} {public global
}

decl {\#include "tlIO/FFmpeg.h"} {public global
}

decl {\#include "tlCore/String.h"} {public global
}

decl {\#include "mrvCore/mrvI8N.h"} {public global
}

decl {\#include "mrvCore/mrvHome.h"} {public global
}

decl {\#include "mrvApp/mrvSettingsObject.h"} {public global
}

decl {\#include "mrViewer.h"} {public global
}

class SaveMovieOptionsUI {open
} {
  decl {bool cancel = false;} {public local
  }
  Function {SaveMovieOptionsUI(bool hasAudio = true, bool audioOnly = false)} {open
  } {
    Fl_Window uiMain {
      label {Save Movie Options} open
      xywh {729 146 465 537} type Double align 0 modal visible
    } {
      Fl_Group {} {
        label {Common Settings}
        xywh {34 38 390 44} box ROUNDED_FRAME color 56
      } {
        Fl_Check_Button Annotations {
          label {Save Annotations}
          callback {auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/Annoations", static_cast<int>(o->value()));}
          tooltip {Save Annotations burned into the movie or sequence.  It also allows saving OpenEXRs from an 8-bit movie and changing OpenEXR's pixel type.} xywh {160 48 25 18} down_box DOWN_BOX
          code0 {auto settings = mrv::App::app->settings();}
          code1 {int value = settings->getValue<int>("SaveMovie/Annoations");}
          code2 {o->value(value);}
        }
      }
      Fl_Group VideoOptions {
        label {Video Options} open
        xywh {34 111 390 216} box ROUNDED_FRAME color 56
      } {
        Fl_Check_Button Hardware {
          label {Hardware Codec}
          user_data this user_data_type {SaveMovieOptionsUI*}
          callback {add_pixel_formats(v->Profile, v->PixelFormat);

auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/HardwareEncode", int(o->value()));}
          xywh {166 121 78 22} down_box DOWN_BOX
        }
        Fl_Choice Profile {
          label Profile
          user_data this user_data_type {SaveMovieOptionsUI*}
          callback {add_presets(o, v->Preset);
add_pixel_formats(o, v->PixelFormat);
add_hardware(o, v->Hardware);

const Fl_Menu_Item* item = o->mvalue();
if (!item) return;
auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/Profile", std::string(item->label()));} open
          tooltip {FFMpeg's Profile settings.} xywh {170 158 170 29} down_box BORDER_BOX
        } {}
        Fl_Choice Preset {
          label Preset
          callback {const Fl_Menu_Item* item = o->mvalue();
if (!item) return;
auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/Preset", std::string(item->label()));} open
          tooltip {FFMpeg's Preset setting for the codec selected.} xywh {171 200 170 29} down_box BORDER_BOX
        } {}
        Fl_Choice PixelFormat {
          label {Pixel Format}
          callback {const Fl_Menu_Item* item = o->mvalue();
if (!item) return;
auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/PixelFormat", std::string(item->label()));} open selected
          tooltip {FFMpeg's Pixel Format for the codec selected} xywh {170 238 170 29} down_box BORDER_BOX
        } {}
        Fl_Button {} {
          label {Advanced Settings}
          callback {if (!uiAdvancedSettings->visible())
   uiAdvancedSettings->show();
else
   uiAdvancedSettings->hide();

while (uiAdvancedSettings->visible())
  Fl::check();}
          xywh {171 288 170 28}
        }
      }
      Fl_Group AudioOptions {
        label {Audio Options}
        xywh {34 351 394 132} box ROUNDED_FRAME color 56
      } {
        Fl_Choice AudioCodec {
          label Codec
          callback {const Fl_Menu_Item* item = o->mvalue();
if (!item) return;
auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/AudioCodec", std::string(item->label()));} open
          tooltip {FFMpeg's Audio Codec settings.} xywh {172 375 170 29} down_box BORDER_BOX
          code0 {add_audio_codecs(o);}
        } {}
        Fl_Box {} {
          label {Note that while saving with audio, the audio will not be heard.}
          xywh {57 413 335 60} labelsize 12 align 144
        }
      }
      Fl_Group {} {
        xywh {105 500 244 29}
      } {
        Fl_Button {} {
          label Ok
          user_data uiMain user_data_type {Fl_Double_Window*}
          callback {v->hide();}
          xywh {105 500 90 29}
        }
        Fl_Button {} {
          label Cancel
          user_data uiMain user_data_type {Fl_Double_Window*}
          callback {cancel = true;
v->hide();}
          xywh {259 500 90 29}
        }
      }
    }
    Fl_Window uiAdvancedSettings {
      label {Advanced Settings}
      xywh {720 371 411 310} type Double hide hotspot modal
    } {
      Fl_Check_Button Override {
        label Override
        xywh {129 20 78 22} down_box DOWN_BOX
      }
      Fl_Choice ColorRange {
        label {Color Range}
        tooltip {FFMpeg's Pixel Format for the codec selected} xywh {130 60 170 29} down_box BORDER_BOX
      } {
        MenuItem {} {
          label TV
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label PC
          xywh {10 10 100 20}
        }
      }
      Fl_Choice ColorSpace {
        label {Color Space}
        tooltip {FFMpeg's Pixel Format for the codec selected} xywh {129 102 170 29} down_box BORDER_BOX
      } {
        MenuItem {} {
          label sRGB
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label bt709
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label FCC
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label SMPTE240m
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label bt601
          xywh {40 40 100 20}
        }
        MenuItem {} {
          label bt2020
          xywh {50 50 100 20}
        }
        MenuItem {} {
          label unspecified
          xywh {60 60 100 20}
        }
        MenuItem {} {
          label reserved
          xywh {70 70 100 20}
        }
      }
      Fl_Choice ColorPrimaries {
        label {Color Primaries}
        tooltip {FFMpeg's Preset setting for the codec selected.} xywh {130 146 170 29} down_box BORDER_BOX
      } {
        MenuItem {} {
          label bt709
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label unspecified
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label reserved
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label bt470m
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label SMPTE170m
          xywh {40 40 100 20}
        }
        MenuItem {} {
          label SMPTE240m
          xywh {50 50 100 20}
        }
        MenuItem {} {
          label Film
          xywh {60 60 100 20}
        }
        MenuItem {} {
          label bt2020
          xywh {70 70 100 20}
        }
        MenuItem {} {
          label SMPTE428
          xywh {50 50 100 20}
        }
        MenuItem {} {
          label SMPTE431
          xywh {60 60 100 20}
        }
        MenuItem {} {
          label SMPTE432
          xywh {70 70 100 20}
        }
        MenuItem {} {
          label EBU3213
          xywh {80 80 100 20}
        }
      }
      Fl_Choice ColorTRC {
        label {Color TRC}
        user_data this user_data_type {SaveMovieOptionsUI*}
        tooltip {FFMpeg's Profile settings.} xywh {129 190 170 29} down_box BORDER_BOX
      } {
        MenuItem {} {
          label bt709
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label unspecified
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label reserved
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label gamma22
          xywh {40 40 100 20}
        }
        MenuItem {} {
          label gamma28
          xywh {50 50 100 20}
        }
        MenuItem {} {
          label bt601
          xywh {60 60 100 20}
        }
        MenuItem {} {
          label smpte240m
          xywh {70 70 100 20}
        }
        MenuItem {} {
          label linear
          xywh {80 80 100 20}
        }
        MenuItem {} {
          label log
          xywh {90 90 100 20}
        }
        MenuItem {} {
          label logsqrt
          xywh {100 100 100 20}
        }
        MenuItem {} {
          label {iec61966-2-4}
          xywh {110 110 100 20}
        }
        MenuItem {} {
          label bt1361
          xywh {120 120 100 20}
        }
        MenuItem {} {
          label {iec61966-2-1}
          xywh {120 120 100 20}
        }
        MenuItem {} {
          label {bt2020-10}
          xywh {130 130 100 20}
        }
        MenuItem {} {
          label {bt2020-12}
          xywh {140 140 100 20}
        }
        MenuItem {} {
          label smpte2084
          xywh {150 150 100 20}
        }
        MenuItem {} {
          label {arib-std-b67}
          xywh {160 160 100 20}
        }
      }
      Fl_Group {} {open
        xywh {85 242 244 29}
      } {
        Fl_Button {} {
          label Ok
          user_data uiAdvancedSettings user_data_type {Fl_Double_Window*}
          callback {v->hide();}
          xywh {85 242 90 29}
        }
        Fl_Button {} {
          label Cancel
          user_data uiAdvancedSettings user_data_type {Fl_Double_Window*}
          callback {Override->value(0);
v->hide();}
          xywh {239 242 90 29}
        }
      }
    }
    code {if (!hasAudio)
{
  AudioOptions->deactivate();
}
if (audioOnly)
{
  Annotations->deactivate();
  VideoOptions->deactivate();
}
else
{
   add_profiles(Profile);
   add_presets(Profile, Preset);
   add_pixel_formats(Profile, PixelFormat);
   add_hardware(Profile, Hardware);
}
uiAdvancedSettings->hide();
uiMain->show();
while (uiMain->visible())
  Fl::check();} {}
  }
  Function {add_hardware(Fl_Choice* o, Fl_Check_Button* v)} {} {
    code {const Fl_Menu_Item* item = &o->menu()[o->value()];
if (!item || !item->label()) return;
const std::string codec = item->label();

v->deactivate();

if (codec == "H264")
{    
\#ifdef __APPLE__
   v->activate();
\#endif
}
else if (codec == "ProRes")
{
\#ifdef __APPLE__
   v->activate();
\#endif   
}
else if (codec == "ProRes_Proxy")
{
\#ifdef __APPLE__
   v->activate();
\#endif
}
else if (codec == "ProRes_LT")
{
\#ifdef __APPLE__
   v->activate();
\#endif
}
else if (codec == "ProRes_XQ")
{   
\#ifdef __APPLE__
   v->activate();
\#endif
}
else if (codec == "ProRes_4444")
{
\#ifdef __APPLE__
   v->activate();
\#endif
}
else if (codec == "VP9")
{
\#ifdef __APPLE__
   v->activate();
\#endif
}

auto settings = mrv::App::app->settings();
const bool value = settings->getValue<int>("SaveMovie/HardwareEncode");
v->value(value);} {}
  }
  Function {add_pixel_formats(Fl_Choice* o, Fl_Choice* v)} {open
  } {
    code {const Fl_Menu_Item* item = &o->menu()[o->value()];
if (!item || !item->label()) return;

std::string codec = item->label();

v->clear();


if (codec == "None" || codec == "MJPEG")
{ 
   v->add("YUV_420P");
   v->add("YUV_422P");
   v->add("YUV_444P");
}
else if (codec == "H264")
{    
   v->add("YUV_420P");
   v->add("YUV_422P");
   v->add("YUV_444P");
   v->add("YUV_420P_10LE");
   v->add("YUV_422P_10LE");
   v->add("YUV_444P_10LE");
}
else if (codec == "ProRes")
{   
   v->add("YUV_422P_10LE");

}
else if (codec == "ProRes_Proxy")
{   
   v->add("YUV_422P_10LE");
}
else if (codec == "ProRes_LT")
{   
   v->add("YUV_422P_10LE");
}
else if (codec == "ProRes_XQ")
{   
   v->add("YUV_444P_10LE");
   v->add("YUVA_444P_16LE");
 }
else if (codec == "ProRes_4444")
{      
   v->add("YUV_422P_10LE");
   v->add("YUV_444P_10LE");
   v->add("YUVA_444P_10LE");
\#ifdef __APPLE__
   v->add("YUV_422P_12LE");
   v->add("YUV_444P_12LE");
   v->add("YUVA_444P_12LE");
\#endif
}
else if (codec == "VP9")
{ 
   v->add("YUV_420P");
   v->add("YUVA_420P");
   
   v->add("YUV_422P");
   v->add("YUV_440P");
   v->add("YUV_444P");   
   
   v->add("YUV_420P_10LE");
   v->add("YUV_422P_10LE");
   v->add("YUV_440P_10LE");
   v->add("YUV_444P_10LE");
   
   v->add("YUV_420P_12LE");
   v->add("YUV_422P_12LE");
   v->add("YUV_440P_12LE");
   v->add("YUV_444P_12LE");
   
   v->add("GBRP");
   v->add("GBRP_10LE");
   v->add("GBRP_12LE");
}
else if (codec == "AV1")
{  
   v->add("YUV_420P");
   v->add("YUV_420P_10LE");
}

if (v->size() > 0)
{
    auto settings = mrv::App::app->settings();
    const std::string& saved =
        settings->getValue<std::string>("SaveMovie/PixelFormat");
    for (int i = 0; i < v->size(); ++i)
    {
        const Fl_Menu_Item* const item = &v->menu()[i];
        if (!item->label())
            continue;
        const std::string& fmt = item->label();
        if (saved == fmt)
        {
            v->value(i);
            return;
        }
    }
    v->value(0);
}} {}
  }
  Function {add_presets(Fl_Choice* o, Fl_Choice* v)} {} {
    code {const Fl_Menu_Item* item = &o->menu()[o->value()];
if (!item || !item->label()) return;

std::string codec = tl::string::toLower(item->label());
codec += "-";

std::string directoryPath = mrv::presetspath();

// Open the directory
v->clear();
fs::directory_iterator dirIter(directoryPath);
for (const auto& entry : dirIter)
{
   // Check if the entry is a regular file, starts with "codec-", and ends with ".pst"
   std::string filename = entry.path().filename().string();
        
   // Check if the entry is a regular file and starts with say "vp9-"
   if (fs::is_regular_file(entry) && 
       filename.find(codec) == 0 &&
       filename.size() > 4 && 
       filename.substr(filename.size() - 4) == ".pst")
   {
       std::string preset = filename.substr(codec.size(),
                                            filename.size()-4-codec.size());
       v->add(preset.c_str());
   }
}

if (v->size() > 0)
{
  auto settings = mrv::App::app->settings();
  const std::string& saved = settings->getValue<std::string>("SaveMovie/Preset");
  for (int i = 0; i < v->size(); ++i)
  {
     const Fl_Menu_Item* const item = &v->menu()[i];	
     if (!item->label()) continue;
     const std::string& preset = item->label();
     if (saved == preset)
     {
         v->value(i);
         v->activate();
         return;
     }
  }
  v->value(0);
  v->activate();
}
else
{
  v->deactivate();
}} {}
  }
  Function {add_profiles(Fl_Choice* o)} {} {
    code {auto entries = tl::ffmpeg::getProfileLabels();
    for (auto entry : entries)
        o->add(gettext(entry.c_str()));

    if (o->size() > 0)
    {
        auto settings = mrv::App::app->settings();
        const std::string& saved =
            settings->getValue<std::string>("SaveMovie/Profile");
        for (int i = 0; i < o->size(); ++i)
        {
            const Fl_Menu_Item* const item = &o->menu()[i];
            if (!item->label())
                continue;
            const std::string& profile = item->label();
            if (saved == profile)
            {
                o->value(i);
                o->activate();
                return;
            }
        }
    }
    o->value(0);} {}
  }
  Function {add_audio_codecs(Fl_Choice* o)} {} {
    code {auto entries = tl::ffmpeg::getAudioCodecLabels();
 for (auto entry : entries)
    o->add(gettext(entry.c_str()));

if (o->size() > 0)
{
    auto settings = mrv::App::app->settings();
    const std::string& saved = settings->getValue<std::string>("SaveMovie/AudioCodec");
    for (int i = 0; i < o->size(); ++i)
    {
        const Fl_Menu_Item* const item = &o->menu()[i];
        if (!item->label())
            continue;
        const std::string& codec = item->label();
        if (saved == codec)
        {
            o->value(i);
            return;
        }
    }
}
o->value(0);} {}
  }
}
