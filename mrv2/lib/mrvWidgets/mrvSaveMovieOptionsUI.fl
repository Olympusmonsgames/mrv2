# data file for the Fltk User Interface Designer (fluid)
version 1.0400
i18n_type 1
i18n_include {<libintl.h>}
i18n_conditional {}
i18n_gnu_function gettext
i18n_gnu_static_function gettext_noop
header_name {.h}
code_name {.cxx}
decl {\#include <string>} {public global
}

decl {\#include <filesystem>} {public global
}

decl {namespace fs = std::filesystem;} {public global
}

decl {\#include "tlIO/FFmpeg.h"} {public global
}

decl {\#include "tlCore/String.h"} {public global
}

decl {\#include "mrvCore/mrvI8N.h"} {public global
}

decl {\#include "mrvCore/mrvHome.h"} {public global
}

class SaveMovieOptionsUI {open
} {
  decl {bool cancel = false;} {public local
  }
  Function {add_pixel_formats(Fl_Choice* o, Fl_Choice* v)} {open
  } {
    code {const Fl_Menu_Item* item = &o->menu()[o->value()];
if (!item || !item->label()) return;

std::string codec = item->label();

v->clear();


if (codec == "None" || codec == "MJPEG")
{ 
   v->add("YUV_420P");
   v->add("YUV_422P");
   v->add("YUV_444P");
}
else if (codec == "H264")
{    
   v->add("YUV_420P");
   v->add("YUV_422P");
   v->add("YUV_444P");
   v->add("YUV_420P_10LE");
   v->add("YUV_422P_10LE");
   v->add("YUV_444P_10LE");
}
else if (codec == "ProRes")
{   
   v->add("YUV_422P_10LE");
 }
else if (codec == "ProRes_Proxy")
{   
   v->add("YUV_422P_10LE");
}
else if (codec == "ProRes_LT")
{   
   v->add("YUV_422P_10LE");
}
else if (codec == "ProRes_XQ")
{   
   v->add("YUV_444P_10LE");
   v->add("YUVA_444P_16LE");
 }
else if (codec == "ProRes_4444")
{      
   v->add("YUV_422P_10LE");
   v->add("YUV_444P_10LE");
   v->add("YUVA_444P_10LE");
\#ifdef __APPLE__
   v->add("YUV_422P_12LE");
   v->add("YUV_444P_12LE");
   v->add("YUVA_444P_12LE");
\#endif
}
else if (codec == "VP9")
{ 
   v->add("YUV_420P");
   v->add("YUVA_420P");
   
   v->add("YUV_422P");
   v->add("YUV_440P");
   v->add("YUV_444P");   
   
   v->add("YUV_420P_10LE");
   v->add("YUV_422P_10LE");
   v->add("YUV_440P_10LE");
   v->add("YUV_444P_10LE");
   
   v->add("YUV_420P_12LE");
   v->add("YUV_422P_12LE");
   v->add("YUV_440P_12LE");
   v->add("YUV_444P_12LE");
   
   v->add("GBRP");
   v->add("GBRP_10LE");
   v->add("GBRP_12LE");
}
else if (codec == "AV1")
{  
   v->add("YUV_420P");
   v->add("YUV_420P_10LE");
}

if (v->size() > 0)
  v->value(0);} {selected
    }
  }
  Function {add_presets(Fl_Choice* o, Fl_Choice* v)} {open
  } {
    code {const Fl_Menu_Item* item = &o->menu()[o->value()];
if (!item || !item->label()) return;

std::string codec = tl::string::toLower(item->label());
codec += "-";

std::string directoryPath = mrv::presetspath();

// Open the directory
v->clear();
fs::directory_iterator dirIter(directoryPath);
for (const auto& entry : dirIter)
{
   // Check if the entry is a regular file, starts with "codec-", and ends with ".pst"
   std::string filename = entry.path().filename().string();
        
   // Check if the entry is a regular file and starts with say "vp9-"
   if (fs::is_regular_file(entry) && 
       filename.find(codec) == 0 &&
       filename.size() > 4 && 
       filename.substr(filename.size() - 4) == ".pst")
   {
       std::string preset = filename.substr(codec.size(),
                                           filename.size()-4-codec.size());
       v->add(preset.c_str());
   }
}

if (v->size() > 0)
{
  v->value(0);
  v->activate();
}
else
{
  v->deactivate();
}} {}
  }
  Function {add_profiles(Fl_Choice* o)} {open
  } {
    code {auto entries = tl::ffmpeg::getProfileLabels();
for (auto entry : entries)
   o->add(gettext(entry.c_str()));
o->value(0);} {}
  }
  Function {SaveMovieOptionsUI(bool hasAudio = true, bool audioOnly = false)} {open
  } {
    Fl_Window uiMain {
      label {Save Movie Options} open
      xywh {946 313 465 537} type Double align 0 hide modal
    } {
      Fl_Group {} {
        label {Common Settings}
        xywh {34 38 390 44} box ROUNDED_FRAME color 56
      } {
        Fl_Check_Button Annotations {
          label {Save Annotations}
          tooltip {Save Annotations burned into the movie or sequence.  It also allows saving OpenEXRs from an 8-bit movie and changing OpenEXR's pixel type.} xywh {160 48 25 18} down_box DOWN_BOX
        }
      }
      Fl_Group VideoOptions {
        label {Video Options} open
        xywh {34 111 390 188} box ROUNDED_FRAME color 56
      } {
        Fl_Choice PixelFormat {
          label {Pixel Format} open
          tooltip {FFMpeg's Pixel Format for the codec selected} xywh {170 222 170 29} down_box BORDER_BOX
        } {}
        Fl_Choice Preset {
          label Preset open
          tooltip {FFMpeg's Preset setting for the codec selected.} xywh {171 176 170 29} down_box BORDER_BOX
        } {}
        Fl_Choice Profile {
          label Profile
          user_data this user_data_type {SaveMovieOptionsUI*}
          callback {add_presets(o, v->Preset);
add_pixel_formats(o, v->PixelFormat);} open
          tooltip {FFMpeg's Profile settings.} xywh {170 131 170 29} down_box BORDER_BOX
          code0 {add_profiles(o);}
          code1 {add_presets(o, Preset);}
          code2 {add_pixel_formats(o, PixelFormat);}
        } {}
      }
      Fl_Group AudioOptions {
        label {Audio Options}
        xywh {34 322 394 132} box ROUNDED_FRAME color 56
      } {
        Fl_Choice AudioCodec {
          label Codec open
          tooltip {FFMpeg's Audio Codec settings.} xywh {172 346 170 29} down_box BORDER_BOX
          code0 {auto entries = tl::ffmpeg::getAudioCodecLabels();}
          code1 {for (auto entry : entries)}
          code2 {o->add(gettext(entry.c_str()));}
          code3 {o->value(1);}
        } {}
        Fl_Box {} {
          label {Note that while saving with audio, the audio will not be heard.}
          xywh {57 384 335 60} labelsize 12 align 144
        }
      }
      Fl_Group {} {open
        xywh {105 471 244 29}
      } {
        Fl_Button {} {
          label Ok
          user_data uiMain user_data_type {Fl_Double_Window*}
          callback {v->hide();}
          xywh {105 471 90 29}
        }
        Fl_Button {} {
          label Cancel
          user_data uiMain user_data_type {Fl_Double_Window*}
          callback {cancel = true;
v->hide();}
          xywh {259 471 90 29}
        }
      }
    }
    code {if (!hasAudio)
{
  AudioOptions->deactivate();
}
if (audioOnly)
{
  Annotations->deactivate();
  VideoOptions->deactivate();
}
uiMain->show();
while (uiMain->visible())
  Fl::check();} {}
  }
}
