# data file for the Fltk User Interface Designer (fluid)
version 1.0400
i18n_type 1
i18n_include {<libintl.h>}
i18n_conditional {}
i18n_gnu_function gettext
i18n_gnu_static_function gettext_noop
header_name {.h}
code_name {.cxx}
decl {\#include "FL/Fl_Flex.H"} {public global
}

decl {\#include "mrvCore/mrvColorSpaces.h"} {public global
}

decl {\#include "mrvCore/mrvI8N.h"} {public global
}

decl {\#include "mrvWidgets/mrvDockGroup.h"} {public global
}

decl {\#include "mrvWidgets/mrvButton.h"} {public global
}

decl {\#include "mrvWidgets/mrvStateButton.h"} {public global
}

decl {\#include "mrvWidgets/mrvMainWindow.h"} {public global
}

decl {\#include "mrvWidgets/mrvPopupMenu.h"} {public global
}

decl {\#include "mrvWidgets/mrvPopupAudio.h"} {public global
}

decl {\#include "mrvWidgets/mrvSlider.h"} {public global
}

decl {\#include "mrvWidgets/mrvVolumeSlider.h"} {public global
}

decl {\#include "mrvWidgets/mrvResizableBar.h"} {public global
}

decl {\#include "mrvWidgets/mrvStatusBar.h"} {public global
}

decl {\#include "mrvWidgets/mrvSecondaryWindow.h"} {public global
}

decl {\#include "mrvWidgets/mrvTile.h"} {public global
}

decl {\#include "mrvWidgets/mrvTimecode.h"} {public global
}

decl {\#include "mrvWidgets/mrvTimelineGroup.h"} {public global
}

decl {\#include "mrvWidgets/mrvMenuBar.h"} {public global
}

decl {\#include "mrvFl/mrvLanguages.h"} {public global
}

decl {\#include "mrvFl/mrvCallbacks.h"} {public global
}

decl {\#include "mrvFl/mrvPreferences.h"} {public global
}

decl {\#include "mrvUI/mrvUtil.h"} {public global
}

decl {\#include "mrvGL/mrvGLViewport.h"} {public global
}

decl {\#include "mrvGL/mrvTimelineWidget.h"} {public global
}

decl {\#include "mrvPanels/mrvPanelsCallbacks.h"} {public global
}

decl {\#include "mrvApp/mrvSettingsObject.h"} {private local
}

decl {\#include "mrvApp/App.h"} {public global
}

decl {\#include "mrvAboutUI.h"} {public global
}

decl {\#include "mrvHotkeyUI.h"} {private local
}

decl {\#include "mrvPreferencesUI.h"} {public global
}

decl {class HotkeyUI;} {public global
}

decl {class AboutUI;} {public global
}

widget_class PixelToolBarClass {
  xywh {225 122 682 31} resizable
  class Fl_Double_Window visible
} {
  Fl_Group {} {
    xywh {-2 0 688 30} box FLAT_BOX color 56
  } {
    Fl_Menu_Button uiZoom {
      label x1
      user_data this user_data_type {ViewerUI*}
      callback {int t = o->value();
float f;
if ( t < 8 )
{
f = 1 / (float) (9-t);
}
else if ( t == 17 )
{
ui->uiView->frameView();
return;
}
else
{
f = float(t - 7);
}
ui->uiView->setViewZoom( f );
ui->uiView->centerView();
o->value(8);}
      tooltip {Image zoom setting.} xywh {1 3 26 24} color 1397969664 labelsize 10 labelcolor 26 align 16 textsize 10
      class {mrv::PopupMenu}
    } {
      MenuItem {} {
        label {1/9}
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label {1/8}
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label {1/7}
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label {1/6}
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label {1/5}
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label {1/4}
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label {1/3}
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label {1/2}
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label x1
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label x2
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label x3
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label x4
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label x5
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label x6
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label x7
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label x8
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label x9
        xywh {5 5 100 20}
      }
      MenuItem {} {
        label FIT
        xywh {5 5 100 20}
      }
    }
    Fl_Group {} {open
      xywh {27 1 659 28} box FLAT_BOX color 56
    } {
      Fl_Output uiCoord {
        label XY
        tooltip {Image coordinate of pixel under mouse.} xywh {46 3 66 25} box FLAT_BOX color 56 labelfont 4 labelsize 10 labelcolor 17 textsize 10 textcolor 7
      }
      Fl_Group {} {open
        xywh {112 1 574 28}
      } {
        Fl_Group {} {open
          xywh {112 1 574 28}
        } {
          Fl_Group {} {open
            xywh {112 3 236 25}
          } {
            Fl_Menu_Button uiAColorType {
              label RGBA user_data_type {void*}
              callback {ui->uiView->updatePixelBar();}
              tooltip {Switch RGBA display between floating point, hexadecimal (0..0xff) and decimal (0..255).} xywh {112 3 34 24} labelsize 9 align 48
              code0 {o->disable_glyph();}
              class {mrv::PopupMenu}
            } {
              MenuItem {} {
                label RGBA
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label Hex
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label 8bit
                xywh {5 5 100 20}
              }
            }
            Fl_Group {} {open
              xywh {148 3 200 25}
            } {
              Fl_Output uiPixelR {
                tooltip {Red value of image pixel under mouse.} xywh {148 3 50 25} box FLAT_BOX color 56 align 56 textsize 12 textcolor 1
              }
              Fl_Output uiPixelG {
                tooltip {Green value of image pixel under mouse.} xywh {198 3 50 25} box FLAT_BOX color 56 align 56 textsize 12 textcolor 2
              }
              Fl_Output uiPixelB {
                tooltip {Blue value of image pixel under mouse.} xywh {248 3 50 25} box FLAT_BOX color 56 align 56 textsize 12 textcolor 4
              }
              Fl_Output uiPixelA {
                tooltip {Alpha value of image pixel under mouse.} xywh {298 3 50 25} box FLAT_BOX color 56 align 56 textsize 12 textcolor 7
              }
            }
          }
          Fl_Output uiPixelView {
            tooltip {8-bit sample of image pixel under mouse.} xywh {374 2 25 25} box FLAT_BOX color 1397969664
          }
          Fl_Group {} {open
            xywh {401 3 178 26}
          } {
            Fl_Menu_Button uiBColorType {
              label HSV user_data_type {void*}
              callback {int i = o->value();
if ( i < 0 ) return;
o->label( mrv::color::space2id( (mrv::color::Space) (i+1)) );
ui->uiView->redraw();}
              tooltip {Switch pixel color space information display for the pixel under the cursor.} xywh {402 3 27 25} labelsize 9
              code0 {o->disable_glyph();}
              code1 {o->disable_label();}
              class {mrv::PopupMenu}
            } {
              MenuItem {} {
                label HSV
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label HSL
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label {XYZ CIE XYZ}
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label {xyY CIE xyY}
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label {Lab CIELAB (L*a*b*)}
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label {Luv CIELUV (L*u*v*)}
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label {YUV (Analog PAL)}
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label {YDbDr (Analog SECAM/PAL-N)}
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label {YIQ (Analog NTSC)}
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label {ITU-601 (Digital PAL/NTSC YCbCr)}
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label {ITU-709 (Digital HDTV YCbCr)}
                xywh {5 5 100 20}
              }
            }
            Fl_Output uiPixelH {
              tooltip {Hue value of image pixel under mouse.} xywh {429 3 50 24} box FLAT_BOX color 56 align 48 textsize 12 textcolor 3
            }
            Fl_Output uiPixelS {
              tooltip {Saturation value of image pixel under mouse.} xywh {479 3 50 24} box FLAT_BOX color 56 align 48 textsize 12 textcolor 3
            }
            Fl_Output uiPixelV {
              tooltip {Value (Intensity) of image pixel under mouse.} xywh {529 3 50 24} box FLAT_BOX color 56 align 48 textsize 12 textcolor 3
            }
          }
          Fl_Menu_Button uiPixelValue {
            label F user_data_type {void*}
            callback {select_character( uiPixelValue );
ui->uiView->updatePixelBar();
ui->uiView->redraw();} open
            tooltip {Displays:
* Full Pixel Values (Gamma, Gain and LUT)
* Original (No Gamma, No Gain, No Lut)} xywh {351 4 20 24} align 48
            code0 {o->value(0);
o->disable_glyph();}
            class {mrv::PopupMenu}
          } {
            MenuItem {} {
              label Full
              xywh {5 5 100 20}
            }
            MenuItem {} {
              label Original
              xywh {5 5 100 20}
            }
          }
          Fl_Group {} {open
            xywh {586 3 100 24}
          } {
            Fl_Menu_Button uiLType {
              label Y
              callback {int x = o->value();
const char* lbl = o->text(x);
const char name[3] = { lbl[0], lbl[1], 0 };
o->copy_label( name );
ui->uiView->redraw();}
              tooltip {Switch brightness calculation.
Y (Luminance) is the pixel value according to Rec709:
      Y = 0.2126 R + 0.7152 G + 0.0722 B
Y' (Lumma) is the weighted pixel value according to:
      Y' = ( R + G + B ) / 3.0
L (Lightness) is the human perception of luminance of the image which is non linear.
According to CIE No.15.2:
      L = (116 * Y ^ 1/3 - 16) / 100
A pixel of Y = 0.18 (L = 0.5) will appear about half as bright as Y = L = 1.0 (white).} xywh {591 3 21 24} align 112
              code0 {o->value(0);}
              code1 {o->disable_glyph();}
              code2 {o->disable_label();}
              class {mrv::PopupMenu}
            } {
              MenuItem {} {
                label {Y (Luminance)}
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label {Y' (Lumma)}
                xywh {5 5 100 20}
              }
              MenuItem {} {
                label {L (Lightness)}
                tooltip {Lightness is the human perceptual response to luminance Y, according to CIE No.15.2:

      L = 116 * (Y/Yn)^1/3 - 16

where Yn is the white reference (usually 1).} xywh {5 5 100 20}
              }
            }
            Fl_Output uiPixelL {
              tooltip {Luminance of image pixel under mouse.} xywh {612 3 75 24} box FLAT_BOX color 56 align 36 textsize 12 textcolor 7
            }
          }
        }
      }
    }
  }
  decl {ViewerUI* ui;} {private local
  }
  Function {setUI( ViewerUI* x )} {open
  } {
    code {ui = x;} {}
  }
}

widget_class TimelineClass {open
  xywh {130 292 690 29} resizable
  class Fl_Double_Window visible
} {
  Fl_Group {} {open
    xywh {0 0 690 29} box ENGRAVED_BOX
  } {
    Fl_Group {} {open
      xywh {4 0 686 29}
    } {
      Fl_Group {} {open
        xywh {4 3 94 26}
      } {
        Fl_Menu_Button uiTimecodeSwitch {
          label {F:}
          user_data this user_data_type {ViewerUI*}
          callback {mrv::TimeUnits units = (mrv::TimeUnits) o->value();
ui->uiTimeline->setUnits( units );
select_character( uiTimecodeSwitch );}
          tooltip {Switch between Frame, Seconds and Timecode display} xywh {8 3 20 24}
          code0 {o->disable_label();}
          class {mrv::PopupMenu}
        } {
          MenuItem {} {
            label Frames
            xywh {5 3 100 20}
          }
          MenuItem {} {
            label Seconds
            xywh {5 3 100 20}
          }
          MenuItem {} {
            label Timecode
            xywh {5 3 100 20}
          }
        }
        Fl_Input uiFrame {
          user_data this user_data_type {ViewerUI*}
          callback {std::string text = o->value();
if ( text.empty() ) return;
auto player = ui->uiView->getTimelinePlayer();
if ( !player ) return;
double rate = player->timeRange().start_time().rate();
auto units = o->units();
mrv::otime::ErrorStatus error;
auto time = textToTime( text, rate, units,
			&error );
if ( ! tl::time::isValid(time) ) return;
player->seek( time );
ui->uiView->take_focus();}
          tooltip {Current frame.} xywh {28 3 70 24} color -1733777408 selection_color 0 when 8
          code1 {o->textcolor( FL_BLACK );}
          class {mrv::Timecode}
        }
      }
      Fl_Group {} {open
        xywh {99 1 411 28}
      } {
        Fl_Group {} {open
          xywh {99 3 240 26}
        } {
          Fl_Button {} {
            label {@|<}
            user_data this user_data_type {ViewerUI*}
            callback {const auto& player = ui->uiView->getTimelinePlayer();
	    if (!player) return;
	    const auto& timeRange = player->inOutRange();
	    player->seek( timeRange.start_time() );}
            tooltip {Go to the beginning of the sequence.} xywh {102 3 28 24} labelcolor 28
            class {mrv::Button}
          }
          Fl_Button uiPlayBackwards {
            label {@<}
            user_data this user_data_type {ViewerUI*}
            callback {ui->uiView->playBackwards();}
            tooltip {Play sequence backwards.} xywh {130 3 28 24} labelcolor 28
            class {mrv::Button}
          }
          Fl_Button {} {
            label {@<|}
            user_data this user_data_type {ViewerUI*}
            callback {ui->uiView->framePrev();}
            tooltip {Go back one frame.} xywh {158 3 28 24} labelcolor 28
            class {mrv::Button}
          }
          Fl_Button uiStop {
            label {@||}
            user_data this user_data_type {ViewerUI*}
            callback {ui->uiView->stop();}
            tooltip {Stop playback.} xywh {186 3 28 24} labelcolor 19
            class {mrv::Button}
          }
          Fl_Button {} {
            label {@|>}
            user_data this user_data_type {ViewerUI*}
            callback {ui->uiView->frameNext();}
            tooltip {Advance one frame.} xywh {214 3 28 24} labelcolor 28
            class {mrv::Button}
          }
          Fl_Button uiPlayForwards {
            label {@>}
            user_data this user_data_type {ViewerUI*}
            callback {ui->uiView->playForwards();}
            tooltip {Play sequence forward.} xywh {242 3 28 24} down_box DOWN_BOX labelcolor 28
            class {mrv::Button}
          }
          Fl_Button {} {
            label {@>|}
            user_data this user_data_type {ViewerUI*}
            callback {const auto& player = ui->uiView->getTimelinePlayer();
	    if (!player) return;
	    const auto& timeRange = player->inOutRange();
	    player->seek( timeRange.end_time_inclusive() );}
            tooltip {Go to the end of the sequence.} xywh {270 3 28 24} labelcolor 28
            class {mrv::Button}
          }
          Fl_Button uiLoopMode {
            callback {int x = o->value();
delete o->image();

if ( x == 0 )
{
   o->image( mrv::load_svg( "LoopMode.svg" ) );
}
else if ( x == 1 )
{
   o->image( mrv::load_svg( "StopMode.svg" ) );
}
else if ( x == 2 )
{
   o->image( mrv::load_svg( "SwingMode.svg" ) );
}
o->redraw();


tl::timeline::Loop loop = (tl::timeline::Loop) o->value();
ui->uiMain->fill_menu( ui->uiMenuBar );

auto player = ui->uiView->getTimelinePlayer();
if( !player ) return;

player->setLoop( loop );}
            xywh {309 3 24 24} labelcolor 55
            code0 {o->image( mrv::load_svg( "LoopMode.svg" ) );}
            code1 {o->labelcolor( 0xFFFFFFFF );}
            class {mrv::StateButton}
          }
        }
        Fl_Group {} {open
          xywh {341 1 87 28}
        } {
          Fl_Menu_Button fpsDefaults {
            label FPS
            user_data this user_data_type {ViewerUI*}
            callback {int idx = o->value();
double speed = atof( o->text( idx ) );
uiFPS->value( speed );
uiFPS->do_callback();} open
            tooltip {Some default frame rate settings.} xywh {341 1 40 24} labelsize 10 align 16
            code0 {o->disable_label();}
            class {mrv::PopupMenu}
          } {
            MenuItem {} {
              label Default
              xywh {5 3 100 20}
            }
            MenuItem {} {
              label 60
              xywh {5 3 100 20}
            }
            MenuItem {} {
              label {59.94}
              xywh {5 3 100 20}
            }
            MenuItem {} {
              label 50
              xywh {5 3 100 20}
            }
            MenuItem {} {
              label 30
              xywh {5 3 100 20}
            }
            MenuItem {} {
              label {29.976}
              xywh {5 3 100 20}
            }
            MenuItem {} {
              label 25
              xywh {5 3 100 20}
            }
            MenuItem {} {
              label 24
              xywh {5 3 100 20}
            }
            MenuItem {} {
              label {23.976}
              xywh {5 3 100 20}
            }
            MenuItem {} {
              label 15
              xywh {5 3 100 20}
            }
            MenuItem {} {
              label {14.988}
              xywh {5 3 100 20}
            }
            MenuItem {} {
              label {12.5}
              xywh {5 3 100 20}
            }
            MenuItem {} {
              label 12
              xywh {5 3 100 20}
            }
            MenuItem {} {
              label {11.988}
              xywh {15 13 100 20}
            }
          }
          Fl_Input uiFPS {
            user_data this user_data_type {ViewerUI*}
            callback {double speed = o->value();
auto player = ui->uiView->getTimelinePlayer();

	if ( speed <= 0.0 )
	{
		speed = player->defaultSpeed();
		o->value(speed);
		o->redraw();
	}
	player->setSpeed( speed );
ui->uiView->take_focus();}
            tooltip {Allows you to adjust frame rate playback.} xywh {386 3 42 24} color -1733777408 selection_color 0
            code0 {o->textcolor( FL_BLACK );
o->value(24);}
            code1 {o->step(0.001);}
            class Fl_Value_Input
          }
        }
        Fl_Group {} {open
          xywh {429 3 81 26}
        } {
          Fl_Button uiAudioTracks {
            user_data this user_data_type {ViewerUI*}
            callback {bool value = static_cast<bool>(o->value());
ui->app->setMute(value);
delete o->image();
if (value)
{  
   o->image( mrv::load_svg( "Mute.svg" ) );
}
else
{   
   o->image( mrv::load_svg( "Audio.svg" ) );
}
o->redraw();}
            tooltip {Mute audio.} xywh {437 3 18 23} type Toggle labelsize 10 align 80
            code1 {o->image( mrv::load_svg( "Audio.svg" ) );}
          }
          Fl_Slider uiVolume {
            user_data this user_data_type {ViewerUI*}
            callback {float value = o->value();
ui->app->setVolume(value);}
            tooltip {Audio Volume} xywh {455 6 55 15} type {Horz Knob} selection_color 1 align 4 step 0.1 value 1 slider_size 0.25
            class {mrv::VolumeSlider}
          }
        }
      }
      Fl_Group {} {open
        xywh {509 3 181 26}
      } {
        Fl_Input uiStartFrame {
          user_data this user_data_type {ViewerUI*}
          callback {auto player = ui->uiView->getTimelinePlayer();
if ( !player ) return;

const auto& range = player->inOutRange();
const auto& endTime = range.end_time_exclusive();
const auto& startTime = textToTime( o->value(),
				    endTime.rate(),
				    o->units(), nullptr );
if ( ! tl::time::isValid(startTime) ) return;

auto new_range =
   mrv::otime::TimeRange::range_from_start_end_time( startTime, endTime );

player->setInOutRange( new_range );
ui->uiTimeline->setTimelinePlayer(player);
ui->uiTimeline->redraw();
ui->uiView->take_focus();}
          tooltip {Allows you to set starting frame for timeline.} xywh {530 3 70 24} color -1733777408 selection_color 0 when 8
          code1 {o->textcolor( FL_BLACK );}
          class {mrv::Timecode}
        }
        Fl_Input uiEndFrame {
          user_data this user_data_type {ViewerUI*}
          callback {auto player = ui->uiView->getTimelinePlayer();
if ( !player ) return;

const auto& range = player->inOutRange();
const auto& startTime = range.start_time();
const auto& endTime = textToTime( o->value(),
				  startTime.rate(),
				  o->units(), nullptr );
if ( ! tl::time::isValid(endTime) ) return;

auto new_range =
   mrv::otime::TimeRange::range_from_start_end_time_inclusive( startTime, endTime );

player->setInOutRange( new_range );
ui->uiTimeline->setTimelinePlayer(player);
ui->uiTimeline->redraw();
ui->uiView->take_focus();}
          tooltip {Allows you to set the ending frame for timeline.} xywh {620 3 70 24} color -1733777408 selection_color 0 when 8
          code1 {o->textcolor( FL_BLACK );}
          class {mrv::Timecode}
        }
        Fl_Button uiStartButton {
          label S
          user_data this user_data_type {ViewerUI*}
          callback {auto player = ui->uiView->getTimelinePlayer();
		    if ( !player ) return;
if ( !o->value() )
	player->resetInPoint();
else
	player->setInPoint();

const auto& range = player->inOutRange();
const auto& startTime = range.start_time();

uiStartFrame->setTime( startTime );

ui->uiTimeline->setTimelinePlayer(player);
ui->uiTimeline->redraw();}
          xywh {511 3 20 24} type Toggle down_box DOWN_BOX align 16
        }
        Fl_Button uiEndButton {
          label E
          user_data this user_data_type {ViewerUI*}
          callback {auto player = ui->uiView->getTimelinePlayer();
if ( !player ) return;

if ( !o->value() )
	player->resetOutPoint();
else
	player->setOutPoint();

const auto& range = player->inOutRange();
const auto& endTime = range.end_time_inclusive();

uiEndFrame->setTime( endTime );

ui->uiTimeline->setTimelinePlayer(player);
ui->uiTimeline->redraw();}
          xywh {599 3 20 24} type Toggle
        }
      }
    }
  }
  decl {ViewerUI* ui;} {private local
  }
  Function {setUI( ViewerUI* x )} {open
  } {
    code {ui = x;} {}
  }
}

class ViewerUI {open
} {
  decl {static mrv::App* app;} {public local
  }
  decl {static PreferencesUI* uiPrefs;} {public local
  }
  decl {static HotkeyUI* uiHotkey;} {public local
  }
  decl {static AboutUI* uiAbout;} {public local
  }
  decl {mrv::SecondaryWindow* uiSecondary;} {public local
  }
  Function {make_window()} {open private
  } {
    code {uiPrefs = new PreferencesUI( this );
uiHotkey = new HotkeyUI( this );
uiAbout = new AboutUI( this );
uiSecondary = nullptr;} {}
    Fl_Window uiMain {
      label mrv2
      user_data this user_data_type {ViewerUI*}
      callback {exit_cb( o, v );} open
      xywh {998 185 690 602} type Double align 80 hide resizable
      class {mrv::MainWindow} size_range {690 602 0 0}
    } {
      Fl_Pack uiRegion {open
        xywh {0 0 690 602} box FLAT_BOX resizable
        code0 {o->fixed( uiMenuGroup, uiMenuGroup->h() );}
        code1 {o->fixed( uiTopBar, uiTopBar->h() );}
        code2 {o->fixed( uiBottomBar, uiBottomBar->h() );}
        code3 {o->fixed( uiPixelBar, uiPixelBar->h() ); o->fixed( uiStatusGroup, uiStatusGroup->h() );}
        class Fl_Flex
      } {
        Fl_Group uiMenuGroup {open
          xywh {0 0 690 25} box FLAT_BOX
        } {
          Fl_Group {} {open
            xywh {0 0 660 25}
          } {
            Fl_Menu_Bar uiMenuBar {open
              xywh {0 0 602 25} labeltype NO_LABEL textsize 12
              class {mrv::MenuBar}
            } {}
            Fl_Button uiEdit {
              label Edit
              user_data this user_data_type {ViewerUI*}
              callback {int value = !o->value();
bool presentation = uiView->getPresentationMode();
mrv::EditMode mode = mrv::EditMode::kTimeline;
if (value)             mode = mrv::EditMode::kFull;
else if (presentation) mode = mrv::EditMode::kNone;
//mrv::set_edit_mode_cb(mode, v);
mrv::editMode = mode;
if (!presentation)
{
    uiView->resizeWindow();
}
mrv::set_edit_mode_cb(mode, v);}
              tooltip {Toggle Edit Mode} xywh {602 0 58 25} down_box DOWN_BOX selection_color 95 labelsize 12
            }
          }
          Fl_Button {} {
            user_data this user_data_type {ViewerUI*}
            callback {uiView->resizeWindow();}
            tooltip {Fit Window to Image} image {../../icons/WindowFullScreen.svg} compress_image 1 xywh {660 0 30 25}
            class {mrv::Button}
          }
        }
        Fl_Group uiTopBar {open
          xywh {0 25 690 28} box ENGRAVED_BOX
        } {
          Fl_Group {} {open
            xywh {3 26 122 26} color 1397969664
          } {
            Fl_Menu_Button uiColorChannel {
              label {(no image)}
              user_data this user_data_type {ViewerUI*}
              callback {const auto& player = uiView->getTimelinePlayer();
	      		player->setVideoLayer( o->value() );
			auto model = v->app->filesModel();
			auto item = model->observeA()->get();
			model->setLayer(item, o->value());} open
              tooltip {Allows you to select different image channels or layers.} xywh {3 26 122 25} box ROUNDED_BOX labelsize 12
              class {mrv::PopupMenu}
            } {}
          }
          Fl_Group {} {open
            xywh {125 25 295 26} color 1397969664
          } {
            Fl_Button uiExposureLess {
              label {@<}
              callback {const float inc = sqrtf( 2.0f );
float gain = uiGain->value();
gain /= inc;
uiGain->value( gain );
uiGain->do_callback();}
              tooltip {Reduce gain 1/2 stop (divide by sqrt(2)).} xywh {129 26 12 25} labelsize 10
            }
            Fl_Button uiFStop {
              label {f/8}
              callback {static float old_gain = 1.0f;
float gain = uiGain->value();
if ( gain == 1.0f )
{
   uiGain->value( old_gain );
}
else
{
   old_gain = gain;
   uiGain->value( 1.0f );
}
uiGain->do_callback();}
              tooltip {Toggle gain between 1 and the previous setting.} xywh {141 26 25 25}
            }
            Fl_Button uiExposureMore {
              label {@>}
              callback {const float inc = sqrtf( 2.0f );
float gain = uiGain->value();
gain *= inc;
uiGain->value( gain );
uiGain->do_callback();}
              tooltip {Increase gain 1/2 stop (multiply by sqrt(2)).} xywh {166 26 12 25} labelsize 10
            }
            Fl_Value_Input uiGainInput {
              user_data this user_data_type {ViewerUI*}
              callback {uiGain->value( o->value() );
uiView->updateDisplayOptions();}
              tooltip {Gain image value.  A simple multiplier of the image pixel values.} xywh {180 27 35 22} color -1733777408 selection_color 0 maximum 64 value 1
              code0 {o->textsize(12);}
              code1 {o->textcolor( FL_BLACK );}
            }
            Fl_Slider uiGain {
              user_data this user_data_type {ViewerUI*}
              callback {uiGainInput->value( o->value() );
uiView->updateDisplayOptions();}
              tooltip {Allows you to adjust the gain or exposure of the image.} xywh {215 27 59 22} type {Horz Knob} maximum 64 value 1
              code0 {o->minimum( 0.02 );}
              code1 {o->maximum( 64.0 ); o->step( 0.1 );}
              code2 {o->value( 1.0 );}
              code3 {o->slider_type( mrv::Slider::kLOG );}
              class {mrv::Slider}
            }
            Fl_Menu_Button uiICS {
              label {Input Color Space}
              user_data this user_data_type {ViewerUI*}
              callback {uiView->updateColorConfigOptions();} open
              tooltip {OCIO input color space for the image} xywh {277 27 143 22} box ROUNDED_BOX labelsize 10 align 96
              code0 {o->disable_submenus();}
              class {mrv::PopupMenu}
            } {}
          }
          Fl_Group {} {open
            xywh {425 25 264 27}
          } {
            Fl_Menu_Button OCIOView {
              label OCIO
              user_data this user_data_type {ViewerUI*}
              callback {uiView->updateColorConfigOptions();} open
              tooltip {OCIO Display/View} xywh {425 27 150 22} box ROUNDED_BOX labelsize 12 align 80
              code0 {o->disable_submenus();}
              class {mrv::PopupMenu}
            } {}
            Fl_Button uiGammaSwitch {
              label Y
              callback {static float old_gamma = 2.2f;
float gamma = uiGamma->value();
if ( gamma == 1.0f )
{
   uiGamma->value( old_gamma );
}
else
{
   old_gamma = gamma;
   uiGamma->value( 1.0f );
}
uiGamma->do_callback();}
              tooltip {Toggle gamma between 1 and the previous setting.} xywh {575 28 22 22}
            }
            Fl_Value_Input uiGammaInput {
              user_data this user_data_type {ViewerUI*}
              callback {uiGamma->value( o->value() );
uiView->updateDisplayOptions();}
              tooltip {Allows you to adjust gamma curve for display.
Value is:  pow( 2, 1/x );} xywh {597 28 35 22} color -1733777408 selection_color 0 maximum 64 value 1
              code0 {o->textsize(12);}
              code1 {o->textcolor( FL_BLACK );}
            }
            Fl_Slider uiGamma {
              user_data this user_data_type {ViewerUI*}
              callback {uiGammaInput->value( o->value() );
uiView->updateDisplayOptions();}
              tooltip {Allows you to adjust gamma curve for display.
Value is:  pow( 2, 1/x );} xywh {632 28 54 22} type {Horz Knob} maximum 4 step 0.01 value 1
              class {mrv::Slider}
            }
          }
        }
        Fl_Tile uiTileGroup {open
          xywh {0 53 690 465}
          code0 {;}
          class {mrv::Tile}
        } {
          Fl_Group {} {
            xywh {0 80 690 408} labeltype NO_LABEL hide resizable
          } {}
          Fl_Pack uiViewGroup {open
            xywh {0 53 690 433} type HORIZONTAL
            code0 {o->fixed( uiToolsGroup, uiToolsGroup->w() );}
            code1 {uiMain->workspace = uiViewGroup;}
            class Fl_Flex
          } {
            Fl_Group uiToolsGroup {open
              xywh {0 53 42 433} box FLAT_BOX
            } {
              Fl_Button uiScrub {
                user_data this user_data_type {ViewerUI*}
                callback {uiView->setActionMode( mrv::ActionMode::kScrub );}
                tooltip {Scrubbing Tool} image {../../icons/scrub.xpm} compress_image 0 xywh {2 53 40 35} down_box DOWN_BOX value 1 selection_color 95
                class {mrv::Button}
              }
              Fl_Button uiSelection {
                user_data this user_data_type {ViewerUI*}
                callback {uiView->setActionMode( mrv::ActionMode::kSelection );

if (Fl::event_clicks() >= 1)
{
   mrv::color_area_panel_cb( nullptr, v);
   Fl::event_clicks(0);
}}
                tooltip {Area Select Tool} image {../../icons/select.xpm} compress_image 0 xywh {2 88 40 35} down_box DOWN_BOX selection_color 95
                class {mrv::Button}
              }
              Fl_Button uiDraw {
                user_data this user_data_type {ViewerUI*}
                callback {uiView->setActionMode( mrv::ActionMode::kDraw );

if (Fl::event_clicks() >= 1)
{
   mrv::annotations_panel_cb( nullptr, v);
   Fl::event_clicks(0);
}}
                tooltip {Freehand Drawing Tool} image {../../icons/draw.xpm} compress_image 0 xywh {2 123 40 35} down_box DOWN_BOX selection_color 95
                class {mrv::Button}
              }
              Fl_Button uiErase {
                user_data this user_data_type {ViewerUI*}
                callback {uiView->setActionMode( mrv::ActionMode::kErase );

if (Fl::event_clicks() >= 1)
{
   mrv::annotations_panel_cb( nullptr, v);
   Fl::event_clicks(0);
}}
                tooltip {Eraser Tool} image {../../icons/erase.xpm} compress_image 0 xywh {2 158 40 35} down_box DOWN_BOX selection_color 95
                class {mrv::Button}
              }
              Fl_Button uiCircle {
                user_data this user_data_type {ViewerUI*}
                callback {uiView->setActionMode( mrv::ActionMode::kCircle );

if (Fl::event_clicks() >= 1)
{
   mrv::annotations_panel_cb( nullptr, v);
   Fl::event_clicks(0);
}}
                tooltip {Circle Tool} image {../../icons/circle.xpm} compress_image 0 xywh {2 193 40 35} down_box DOWN_BOX selection_color 95
                class {mrv::Button}
              }
              Fl_Button uiRectangle {
                user_data this user_data_type {ViewerUI*}
                callback {uiView->setActionMode( mrv::ActionMode::kRectangle);

if (Fl::event_clicks() >= 1)
{
   mrv::annotations_panel_cb( nullptr, v);
   Fl::event_clicks(0);
}}
                tooltip {Rectangle Tool} image {../../icons/rectangle.xpm} compress_image 0 xywh {2 228 40 35} down_box DOWN_BOX selection_color 95
                class {mrv::Button}
              }
              Fl_Button uiArrow {
                user_data this user_data_type {ViewerUI*}
                callback {uiView->setActionMode( mrv::ActionMode::kArrow );

if (Fl::event_clicks() >= 1)
{
   mrv::annotations_panel_cb( nullptr, v);
   Fl::event_clicks(0);
}}
                tooltip {Arrow Tool} image {../../icons/arrow.xpm} compress_image 0 xywh {2 263 40 35} down_box DOWN_BOX selection_color 95
                class {mrv::Button}
              }
              Fl_Button uiText {
                user_data this user_data_type {ViewerUI*}
                callback {uiView->setActionMode( mrv::ActionMode::kText );

if (Fl::event_button() == FL_RIGHT_MOUSE)
{
    mrv::edit_text_shape_cb(v);
    return;
}


if (Fl::event_clicks() >= 1)
{
   mrv::annotations_panel_cb( nullptr, v);
   Fl::event_clicks(0);
}}
                tooltip {Text Tool.   Right click to edit previously stamped text.} image {../../icons/Text.svg} compress_image 1 xywh {1 298 40 35} down_box DOWN_BOX selection_color 95 labelfont 8 labelsize 24 labelcolor 7
                class {mrv::Button}
              }
              Fl_Button uiPenColor {
                user_data this user_data_type {ViewerUI*}
                callback {mrv::set_pen_color_cb( o, v );}
                tooltip {Pick Draw Color and Alpha} xywh {5 337 20 20} box ENGRAVED_BOX color 3 selection_color 3 labeltype NO_LABEL labelfont 8 labelsize 24 align 32
              }
              Fl_Button uiOldPenColor {
                user_data this user_data_type {ViewerUI*}
                tooltip {Old Color Used.  Click on the Arrow to alternate.} xywh {25 357 15 16} box ENGRAVED_BOX color 1 selection_color 1 labeltype NO_LABEL labelfont 8 labelsize 24 align 32
              }
              Fl_Button uiFlipPenColor {
                user_data this user_data_type {ViewerUI*}
                callback {mrv::flip_pen_color_cb( o, v );}
                tooltip {Switch Colors} image {../../icons/Flip.svg} compress_image 1 xywh {25 337 16 20} box NO_BOX labelfont 8 labelsize 24 align 16
                class {mrv::Button}
              }
              Fl_Slider uiPenOpacity {
                callback {auto settingsObject = app->settingsObject();
int a = o->value() * 255;
settingsObject->setValue( mrv::kPenColorA, a);}
                tooltip {Opacity of pen stroke} xywh {7 373 34 19} type {Horz Knob} step 0.01 value 1
              }
              Fl_Group {} {open
                xywh {0 396 42 71}
              } {
                Fl_Button uiUndoDraw {
                  user_data this user_data_type {ViewerUI*}
                  callback {uiView->undo();}
                  tooltip {Undo Last Shape Drawn in Current Frame.} image {../../icons/Undo.svg} compress_image 0 xywh {0 396 40 35} deactivate
                  class {mrv::Button}
                }
                Fl_Button uiRedoDraw {
                  user_data this user_data_type {ViewerUI*}
                  callback {uiView->redo();}
                  tooltip {Redo Previous Shape Drawn in Current Frame.} image {../../icons/Redo.svg} compress_image 0 xywh {0 431 40 36} deactivate
                  class {mrv::Button}
                }
              }
            }
            Fl_Group uiView {
              xywh {42 53 378 433} labeltype NO_LABEL resizable
              code0 {o->main( this );}
              class {mrv::Viewport}
            } {}
            Fl_Group uiDockGroup {
              xywh {420 53 270 433} hide
              code0 {uiViewGroup->fixed( o, 270 );}
            } {
              Fl_Box uiResizableBar {
                xywh {420 53 10 433} box ENGRAVED_BOX
                class {mrv::ResizableBar}
              }
              Fl_Group uiDock {open
                xywh {430 53 260 433} box FLAT_BOX resizable
                code0 {o->set_window( uiMain );}
                code1 {uiMain->set_dock(o);}
                class {mrv::DockGroup}
              } {}
            }
          }
          Fl_Group uiTimelineGroup {open
            xywh {0 488 690 30} box FLAT_BOX color 51
            class {mrv::TimelineGroup}
          } {
            Fl_Group uiTimeline {open
              xywh {0 496 690 22} resizable
              class {mrv::TimelineWidget}
            } {}
          }
        }
        Fl_Group uiBottomBar {open
          xywh {0 518 690 29} box FLAT_BOX
        } {
          Fl_Group uiTimeWindow {open
            xywh {0 518 690 29} box FLAT_BOX resizable
            code0 {o->border(0);}
            code1 {o->setUI( this );}
            class TimelineClass
          } {}
        }
        Fl_Group uiPixelBar {open
          xywh {0 547 690 30} box FLAT_BOX color 56 labelcolor 17
        } {
          Fl_Group uiPixelWindow {open
            xywh {0 547 690 30} box FLAT_BOX color 56 resizable
            code1 {o->setUI( this );}
            class PixelToolBarClass
          } {}
        }
        Fl_Group uiStatusGroup {open
          xywh {0 577 690 25} color 0
        } {
          Fl_Group uiStatusBar {
            label {Everything OK.  } open selected
            xywh {0 577 690 25} box FLAT_BOX labelsize 10 align 84
            code0 {o->save_colors();}
            class {mrv::StatusBar}
          } {
            Fl_Box uiStatus {
              label Scrub
              tooltip {Current tool being used.} xywh {605 577 85 25} box ENGRAVED_BOX align 64
            }
          }
        }
      }
    }
  }
  Function {ViewerUI()} {open
  } {
    code {uiMain = make_window();} {}
  }
  Function {~ViewerUI()} {open
  } {
    code {delete uiSecondary; uiSecondary = nullptr;
delete uiMain; uiMain = nullptr;
delete uiPrefs; uiPrefs = nullptr;
delete uiHotkey; uiHotkey = nullptr;
delete uiAbout; uiAbout = nullptr;} {}
  }
  Function {refresh()} {open
  } {
    code {if ( uiMain ) uiMain->redraw();
if ( uiPrefs ) uiPrefs->uiMain->redraw();
//if ( uiLog ) uiLog->uiMain->redraw();
//if ( uiAbout ) uiAbout->uiMain->redraw();
if ( uiHotkey ) uiHotkey->uiMain->redraw();
//if ( uiConnection ) uiConnection->uiMain->redraw();
//if ( uiGL3dView ) uiGL3dView->uiMain->redraw();
//if ( uiColorArea ) uiColorArea->uiMain->redraw();
//if ( uiHistogram ) uiHistogram->uiMain->redraw();
//if ( uiVectorscope ) uiVectorscope->uiMain->redraw();
//if ( uiWaveform ) uiWaveform->uiMain->redraw();

Fl::check(); // needed to refresh windows} {}
  }
}
