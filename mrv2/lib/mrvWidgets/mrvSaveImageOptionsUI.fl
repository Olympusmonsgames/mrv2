# data file for the Fltk User Interface Designer (fluid)
version 1.0400
i18n_type 1
i18n_include {<libintl.h>}
i18n_conditional {}
i18n_gnu_function gettext
i18n_gnu_static_function gettext_noop
header_name {.h}
code_name {.cxx}
decl {\#include <string>} {public global
}

decl {\#include "mrvCore/mrvFile.h"} {public global
}

decl {\#include "mrvApp/mrvSettingsObject.h"} {public global
}

decl {\#include "mrViewer.h"} {public global
}

class SaveImageOptionsUI {open
} {
  decl {bool cancel = false;} {public local
  }
  decl {bool valid_for_exr = false;} {private local
  }
  decl {std::string extension;} {private local
  }
  Function {select_pixel_type(Fl_Choice* o)} {open
  } {
    code {auto settings = mrv::App::app->settings();
const std::string& saved =
        settings->getValue<std::string>("SaveImage/PixelType");
for (int i = 0; i < o->size(); ++i)
{
   const Fl_Menu_Item* const item = &o->menu()[i];
   const std::string& type = item->label();
   if (saved == type)
   {
       o->value(i);
       return;
    }
}
o->value(0);} {}
  }
  Function {select_compression(Fl_Choice* o)} {open
  } {
    code {auto settings = mrv::App::app->settings();
const std::string& saved =
        settings->getValue<std::string>("SaveImage/Compression");
for (int i = 0; i < o->size(); ++i)
{
   const Fl_Menu_Item* const item = &o->menu()[i];
   const std::string& type = item->label();
   if (saved == type)
   {
       o->value(i);
       return;
    }
}
o->value(0);} {}
  }
  Function {SaveImageOptionsUI(const std::string ext, const bool exr_valid)} {open
  } {
    Fl_Window uiMain {
      label {Save Image Options} open
      xywh {635 296 523 453} type Double align 5 modal visible
    } {
      Fl_Group {} {
        label {Common Settings} open
        xywh {80 41 376 72} box ROUNDED_FRAME color 56
      } {
        Fl_Check_Button Annotations {
          label {Save Annotations}
          callback {auto settings = mrv::App::app->settings();
settings->setValue("SaveImage/Annotations", static_cast<int>(o->value()));}
          tooltip {Save Annotations burned into the movie or sequence.} xywh {192 49 25 25} down_box DOWN_BOX
          code0 {auto settings = mrv::App::app->settings();}
          code1 {int value = settings->getValue<int>("SaveImage/Annotations");}
          code2 {o->value(value);}
        }
        Fl_Choice Resolution {
          label Resolution
          user_data this user_data_type {SaveImageOptionsUI*}
          callback {int value = o->value();

auto settings = mrv::App::app->settings();
settings->setValue("SaveImage/Resolution", value);} open selected
          tooltip {Resolution of movie to save.} xywh {182 74 170 29} down_box BORDER_BOX
          code0 {auto settings = mrv::App::app->settings();}
          code1 {int value = settings->getValue<int>("SaveImage/Annotations");}
          code2 {o->value(value);}
        } {
          MenuItem {} {
            label {Same Size}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Half Size}
            xywh {10 10 100 20}
          }
          MenuItem {} {
            label {Quarter Size}
            xywh {20 20 100 20}
          }
        }
      }
      Fl_Group OpenEXROptions {
        label {OpenEXR Options} open
        xywh {82 139 374 212} box ROUNDED_FRAME color 56
      } {
        Fl_Choice Compression {
          label Compression
          user_data this user_data_type {SaveImageOptionsUI*}
          callback {const Fl_Menu_Item* item = o->mvalue();
DWACompressionGroup->deactivate();
ZipCompressionGroup->deactivate();
const std::string& label = item->label();
if (label == "ZIP" || label == "ZIPS")
{
     ZipCompressionGroup->activate();
}
else if (label == "DWAA" || label == "DWAB")
{
     DWACompressionGroup->activate();
}
auto settings = mrv::App::app->settings();
settings->setValue("SaveImage/Compression", label);}
          tooltip {OpenEXR's Compression Type} xywh {223 161 170 29} down_box BORDER_BOX
        } {
          MenuItem {} {
            label None
            xywh {10 10 100 20}
          }
          MenuItem {} {
            label RLE
            xywh {20 20 100 20}
          }
          MenuItem {} {
            label ZIPS
            xywh {30 30 100 20}
          }
          MenuItem {} {
            label ZIP
            xywh {40 40 100 20}
          }
          MenuItem {} {
            label PIZ
            xywh {50 50 100 20}
          }
          MenuItem {} {
            label PXR24
            xywh {60 60 100 20}
          }
          MenuItem {} {
            label B44
            xywh {70 70 100 20}
          }
          MenuItem {} {
            label B44A
            xywh {80 80 100 20}
          }
          MenuItem {} {
            label DWAA
            xywh {90 90 100 20}
          }
          MenuItem {} {
            label DWAB
            xywh {100 100 100 20}
          }
        }
        Fl_Choice PixelType {
          label {Pixel Type}
          callback {const Fl_Menu_Item* item = o->mvalue();
const std::string& label = item->label();
auto settings = mrv::App::app->settings();
settings->setValue("SaveImage/PixelType", label);}
          tooltip {OpenEXR's Pixel Type} xywh {223 202 170 29} down_box BORDER_BOX
        } {
          MenuItem {} {
            label Half
            xywh {20 20 100 20}
          }
          MenuItem {} {
            label Float
            xywh {30 30 100 20}
          }
        }
        Fl_Group ZipCompressionGroup {open
          xywh {225 248 168 26} deactivate
        } {
          Fl_Value_Input ZipCompressionLevel {
            label {ZIP Compression}
            user_data this user_data_type {SaveImageOptionsUI*}
            callback {v->ZipCompressionSlider->value(o->value());

auto settings = mrv::App::app->settings();
settings->setValue("SaveImage/ZipCompressionLevel", o->value());}
            xywh {225 248 64 26} color -1733777408 minimum 1 maximum 9 step 1 value 4 textcolor 56
          }
          Fl_Slider ZipCompressionSlider {
            user_data ZipCompressionLevel user_data_type {Fl_Value_Input*}
            callback {v->value(o->value());
v->do_callback();
v->redraw();}
            xywh {289 248 104 26} type {Horz Knob} minimum 1 maximum 9 step 1 value 4 slider_size 0.1
          }
        }
        Fl_Group DWACompressionGroup {open
          xywh {225 286 168 26} deactivate
        } {
          Fl_Value_Input DWACompressionLevel {
            label {DWA Compression}
            user_data this user_data_type {SaveImageOptionsUI*}
            callback {v->DWACompressionSlider->value(o->value());

auto settings = mrv::App::app->settings();
settings->setValue("SaveImage/DWACompressionLevel", o->value());}
            xywh {225 286 64 26} color -1733777408 maximum 1e+06 step 0.1 value 45 textcolor 56
          }
          Fl_Slider DWACompressionSlider {
            user_data DWACompressionLevel user_data_type {Fl_Value_Input*}
            callback {v->value(o->value());
v->do_callback();
v->redraw();}
            xywh {289 286 104 26} type {Horz Knob} maximum 1e+06 step 2 value 45 slider_size 0.1
          }
        }
      }
      Fl_Group {} {open
        xywh {133 381 262 34}
      } {
        Fl_Button {} {
          label Ok
          user_data uiMain user_data_type {Fl_Double_Window*}
          callback {v->hide();}
          xywh {133 381 90 34}
        }
        Fl_Button {} {
          label Cancel
          user_data uiMain user_data_type {Fl_Double_Window*}
          callback {cancel = true;
v->hide();}
          xywh {305 381 90 34}
        }
      }
    }
    code {OpenEXROptions->deactivate();
extension = ext;
valid_for_exr = exr_valid;
if (ext == ".exr" && exr_valid)
{
   OpenEXROptions->activate();
   select_pixel_type(PixelType);   
   select_compression(Compression);
}
uiMain->show();
while (uiMain->visible())
  Fl::check();} {}
  }
}
