# data file for the Fltk User Interface Designer (fluid)
version 1.0400
i18n_type 1
i18n_include {<libintl.h>}
i18n_conditional {}
i18n_gnu_function gettext
i18n_gnu_static_function gettext_noop
header_name {.h}
code_name {.cxx}
decl {\#include <string>} {public global
}

decl {\#include "mrvCore/mrvUtil.h"} {selected public global
}

class SaveOptionsUI {open
} {
  decl {bool valid_for_exr = false;} {private local
  }
  decl {std::string extension;} {private local
  }
  Function {SaveOptionsUI(const std::string ext, const bool exr_valid)} {open
  } {
    Fl_Window uiMain {
      label {Saving Options} open
      xywh {635 296 529 515} type Double align 5 hide modal
    } {
      Fl_Group {} {
        label {Common Settings} open
        xywh {80 38 376 42} box ROUNDED_FRAME color 56
      } {
        Fl_Check_Button Annotations {
          label {Save Annotations}
          callback {int value = o->value();
if (value)
{  
  if (extension == ".exr")
  {
    OpenEXROptions->activate();
  }
  PixelType->activate();
}
else
{
  if (extension == ".exr" && !valid_for_exr)
  {
    OpenEXROptions->deactivate();
  }

  PixelType->deactivate();
}}
          tooltip {Save Annotations burned into the movie or sequence.  It also allows saving OpenEXRs from an 8-bit movie and changing OpenEXR's pixel type.} xywh {192 46 25 25} down_box DOWN_BOX
        }
      }
      Fl_Group FFmpegOptions {
        label {FFmpeg Options}
        xywh {78 120 375 69} box ROUNDED_FRAME color 56
      } {
        Fl_Choice Profile {
          label Profile
          tooltip {FFMpeg's H264 Profile settings.} xywh {180 140 170 29} down_box BORDER_BOX
        } {
          MenuItem {} {
            label None
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label H264
            xywh {10 10 100 20}
          }
          MenuItem {} {
            label ProRes
            xywh {20 20 100 20}
          }
          MenuItem {} {
            label ProRes_Proxy
            xywh {30 30 100 20}
          }
          MenuItem {} {
            label ProRes_LT
            xywh {40 40 100 20}
          }
          MenuItem {} {
            label ProRes_HQ
            xywh {50 50 100 20}
          }
          MenuItem {} {
            label ProRes_4444
            xywh {60 60 100 20}
          }
          MenuItem {} {
            label ProRes_XQ
            xywh {70 70 100 20}
          }
        }
      }
      Fl_Group OpenEXROptions {
        label {OpenEXR Options} open
        xywh {71 237 374 212} box ROUNDED_FRAME color 56
      } {
        Fl_Choice Compression {
          label Compression
          callback {const Fl_Menu_Item* item = o->mvalue();
DWACompressionGroup->deactivate();
ZipCompressionGroup->deactivate();
const std::string& label = item->label();
if (label == "ZIP" || label == "ZIPS")
{
     ZipCompressionGroup->activate();
}
else if (label == "DWAA" || label == "DWAB")
{
	DWACompressionGroup->activate();
}}
          tooltip {FFMpeg's H264 Profile settings.} xywh {212 259 170 29} down_box BORDER_BOX
        } {
          MenuItem {} {
            label None
            xywh {10 10 100 20}
          }
          MenuItem {} {
            label RLE
            xywh {20 20 100 20}
          }
          MenuItem {} {
            label ZIPS
            xywh {30 30 100 20}
          }
          MenuItem {} {
            label ZIP
            xywh {40 40 100 20}
          }
          MenuItem {} {
            label PIZ
            xywh {50 50 100 20}
          }
          MenuItem {} {
            label PXR24
            xywh {60 60 100 20}
          }
          MenuItem {} {
            label B44
            xywh {70 70 100 20}
          }
          MenuItem {} {
            label B44A
            xywh {80 80 100 20}
          }
          MenuItem {} {
            label DWAA
            xywh {90 90 100 20}
          }
          MenuItem {} {
            label DWAB
            xywh {100 100 100 20}
          }
        }
        Fl_Choice PixelType {
          label {Pixel Type} open
          tooltip {FFMpeg's H264 Profile settings.} xywh {212 300 170 29} down_box BORDER_BOX deactivate
        } {
          MenuItem {} {
            label Half
            xywh {20 20 100 20}
          }
          MenuItem {} {
            label Float
            xywh {30 30 100 20}
          }
        }
        Fl_Group ZipCompressionGroup {
          xywh {214 346 168 26} deactivate
        } {
          Fl_Value_Input ZipCompressionLevel {
            label {ZIP Compression}
            user_data this user_data_type {SaveOptionsUI*}
            callback {v->ZipCompressionSlider->value(o->value());}
            xywh {214 346 64 26} color -1733777408 minimum 1 maximum 9 step 1 value 4 textcolor 56
          }
          Fl_Slider ZipCompressionSlider {
            user_data ZipCompressionLevel user_data_type {Fl_Value_Input*}
            callback {v->value(o->value());
v->redraw();}
            xywh {278 346 104 26} type {Horz Knob} minimum 1 maximum 9 step 1 value 4 slider_size 0.1
          }
        }
        Fl_Group DWACompressionGroup {open
          xywh {214 384 168 26} deactivate
        } {
          Fl_Value_Input DWACompressionLevel {
            label {DWA Compression}
            user_data this user_data_type {SaveOptionsUI*}
            callback {v->DWACompressionSlider->value(o->value());}
            xywh {214 384 64 26} color -1733777408 maximum 1e+06 step 0.1 value 45 textcolor 56
          }
          Fl_Slider DWACompressionSlider {
            user_data DWACompressionLevel user_data_type {Fl_Value_Input*}
            callback {v->value(o->value());
v->redraw();}
            xywh {278 384 104 26} type {Horz Knob} maximum 1e+06 step 2 value 45 slider_size 0.1
          }
        }
      }
      Fl_Button {} {
        label Ok
        user_data uiMain user_data_type {Fl_Double_Window*}
        callback {v->hide();}
        xywh {200 455 90 34}
      }
    }
    code {FFmpegOptions->deactivate();
OpenEXROptions->deactivate();
extension = ext;
valid_for_exr = exr_valid;
if (ext == ".exr" && exr_valid)
{
   OpenEXROptions->activate();
}
else if (mrv::is_valid_movie(ext))
{  
   FFmpegOptions->activate();
}
uiMain->show();
while (uiMain->visible())
  Fl::check();} {}
  }
}
