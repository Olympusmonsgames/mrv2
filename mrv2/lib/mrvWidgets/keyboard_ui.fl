# data file for the Fltk User Interface Designer (fluid)
version 1.0400
i18n_type 1
i18n_include {<libintl.h>}
i18n_conditional {}
i18n_gnu_function gettext
i18n_gnu_static_function gettext_noop
header_name {.h}
code_name {.cxx}
decl {\#include <cstdio>} {private local
}

decl {\#include "mrvCore/mrvHotkey.h"} {public local
}

decl {\#include "mrvCore/mrvI8N.h"} {private local
}

decl {\#include "mrvWidgets/mrvPopupMenu.h"} {public local
}

decl {\#include "mrvWidgets/mrvHotkeyInput.h"} {public local
}

class ChooseHotkey {open
} {
  decl {mrv::Hotkey hk;} {public local
  }
  decl {mrv::Hotkey backup;} {public local
  }
  Function {make_window(const std::string& name)} {open
  } {
    Fl_Window uiMain {
      label {Hotkey for...} open
      xywh {608 536 360 140} type Double box PLASTIC_UP_BOX hide resizable
      code0 {std::string title = "Hotkey for ";}
      code1 {title += name;}
      code2 {o->copy_label( title.c_str() );} modal
    } {
      Fl_Group {} {open selected
        xywh {0 0 360 140} box UP_BOX
      } {
        Fl_Input uiKey {
          label {Type Key}
          tooltip {Type a key.} xywh {130 18 140 27}
          code0 {o->choose(this);}
          class {mrv::HotkeyInput}
        }
        Fl_Check_Button uiShift {
          label Shift
          xywh {35 68 20 27} down_box DOWN_BOX labelcolor 32
        }
        Fl_Check_Button uiCtrl {
          label Ctrl
          xywh {155 69 25 27} down_box DOWN_BOX labelcolor 32
        }
        Fl_Check_Button uiAlt {
          label Alt
          xywh {35 103 25 27} down_box DOWN_BOX labelcolor 32
        }
        Fl_Check_Button uiMeta {
          label Meta
          xywh {155 103 25 27} down_box DOWN_BOX labelcolor 32
        }
        Fl_Button {} {
          label Clear
          user_data this user_data_type {ChooseHotkey*}
          callback {v->uiKey->value("");
v->uiCtrl->value(0);
v->uiAlt->value(0);
v->uiMeta->value(0);
v->uiShift->value(0);}
          xywh {220 64 130 28}
        }
        Fl_Button {} {
          label Okay
          user_data this user_data_type {ChooseHotkey*}
          callback {v->hk.ctrl  = (bool) v->uiCtrl->value();
v->hk.alt   = (bool) v->uiAlt->value();
v->hk.meta  = (bool) v->uiMeta->value();
v->hk.shift = (bool) v->uiShift->value();

v->hk.key = 0;
v->hk.text = "";
if ( v->uiKey->value() && strlen(v->uiKey->value()) > 0 )
{
  std::string text = v->uiKey->value();

  unsigned key = 0;
  for (int i = 0; i < sizeof(mrv::table) / sizeof(mrv::TableText); i++)
     if (text == _(mrv::table[i].text)) {key = mrv::table[i].n; break;}

  if ( key == 0 )
  {
    char buffer[128];
    for( int i = FL_F + 1; i <= FL_F_Last; ++i )
    {
	snprintf(buffer, 128, "F%d", i - FL_F);
	if ( text == buffer ) { key = i; break; }
    }
  }

  if ( key > 0 ) v->hk.key = key;
  else if ( text.size() )
  {
    v->hk.key = text[0];
    v->hk.text = text[0];
   }
}

v->uiMain->hide();}
          xywh {220 103 55 26}
        }
        Fl_Button {} {
          label Cancel
          user_data this user_data_type {ChooseHotkey*}
          callback {v->hk = v->backup;
v->uiMain->hide();}
          xywh {280 103 70 26}
        }
      }
    }
  }
  Function {ChooseHotkey( const mrv::Hotkey* h )} {open
  } {
    code {backup = *h;
hk = *h;} {}
  }
  Function {fill()} {open
  } {
    code {uiCtrl->value( hk.ctrl );
uiMeta->value( hk.meta );
uiAlt->value( hk.alt );
uiShift->value( hk.shift );

char buffer[100];
const char *keyname = buffer;
unsigned k = hk.key;
if (!k)
   keyname = "0";
else if (k < 128) 
{ // ASCII
   snprintf(buffer, sizeof(buffer), "%c", k);
} 
else if (k >= 0xa0 && k <= 0xff) { // ISO-8859-1 (international keyboards)
   char key[8];
   int kl = fl_utf8encode((unsigned)k, key);
   key[kl] = '\\0';
   snprintf(buffer, sizeof(buffer), "%s", key);
} 
else if (k > FL_F && k <= FL_F_Last) 
{
   snprintf(buffer, sizeof(buffer), "F%d", k - FL_F);
} 
else if (k >= FL_Button && k <= FL_Button+7) 
{
   snprintf(buffer, sizeof(buffer), "FL_Button+%d", k-FL_Button);
} 
else 
{
   snprintf(buffer, sizeof(buffer), "0x%04x", k);
   for (int i = 0; i < sizeof(mrv::table) / sizeof(mrv::TableText); i++)
      if (mrv::table[i].n == k) 
      {
        strcpy(buffer, _(mrv::table[i].text) );
      	break;
      }
}


if (k == 0 )
   uiKey->value( hk.text.c_str() );
else
   uiKey->value( keyname );} {}
  }
  Function {~ChooseHotkey()} {open
  } {
    code {delete uiMain; uiMain = NULL;} {}
  }
}
