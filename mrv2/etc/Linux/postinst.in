#!/bin/bash

# Remove old symlinks just in case
rm -f /usr/bin/mrv2

#
# Add mrv2 to path
#
startup="@CPACK_INSTALL_PREFIX@/bin/mrv2.sh"

echo "Creating symlink from $startup to /usr/bin/mrv2"
ln -s "$startup" /usr/bin/mrv2
echo "Creating symlink from $startup to /usr/bin/mrv2-v@mrv2_VERSION@"
ln -s "$startup" /usr/bin/mrv2-v@mrv2_VERSION@

#
# Make sure script is executable
#
chmod a+x "$startup"

#
# Install Desktop icon
#

name=`logname`
if [[ -z "$name" ]]; then
    name=$LOGNAME
fi

# First, check if user-dirs.dirs exists in user's config directory
config=.config
desktop_dir=/home/${name}/.config/
file=${desktop_dir}/user-dirs.dirs

# if it does, copy it to root .config directory
if [[ -e $file ]]; then
    if [ ! -d /root/.config ]; then
       mkdir /root/.config
    fi
    cp $file /root/.config
fi

# Now, as root, get DESKTOP directory
fulldir=$(xdg-user-dir DESKTOP)
desktop_dir=${fulldir#/root/}

# If fulldir had /root/ in it, then rearrange to copy to /home/user directory
if [[ $fulldir != $desktop_dir ]]; then
    desktop_dir=/home/${name}/${desktop_dir}
fi

# Just in case.  If /home/user/DESKTOP directory is missing, create it.
if [[ ! -d $desktop_dir ]]; then
    mkdir $desktop_dir
fi

#
# Copy icon to applications directory
#
sharedir=/usr/local/@mrv2ShortName@/share/

#
# Copy desktop, icon and locale translations
#
cp -rf ${sharedir}/* /usr/share/
cp /usr/share/icons/hicolor/32x32/apps/mrv2.png /usr/share/icons/hicolor/32x32/apps/mrv2-v@mrv2_VERSION@.png 

icon="mrv2-v@mrv2_VERSION@.desktop"
appdir=${sharedir}applications
appicon="${appdir}/${icon}"
desktop_icon="${desktop_dir}/${icon}"

#
# Copy icon to desktop
#
cp -f "${appicon}" "${desktop_dir}"

#
# Change owner of icon to user
#
chown ${name} "${desktop_icon}"

#
# Make it executable
#
chmod a+x "${desktop_icon}"

#
# Associate Video formats
#
xdg-mime default "${appicon}" video/mp4 video/mpeg video/quicktime video/x-flv video/x-matroska video/x-ms-wmv video/x-msvideo image/x-avi video/x-otio video/x-usd video/x-usda video/x-usdc video/x-usdz

#
# Associate Image formats
#
xdg-mime default "${appicon}" image/x-cin image/x-dpx image/jpeg image/png image/x-tiff image/x-tga image/x-exr image/x-sxr

echo "Updating desktop database..."
update-desktop-database

echo "Updating mime database..."
update-mime-database /usr/share/mime



#
#
# Fix for Rocky Linux 8.9 to Ubuntu 22.04.4 LTS and similar Wayland
# incompatibilities.  Make sure this is the last step of postinst.in.
#
#

# File to modify
file="/usr/share/glib-2.0/schemas/org.gnome.settings-daemon.plugins.xsettings.gschema.xml"

# Desired line to match in configuration
previous_match="  </schema>"
target_match="    <key name=\"antialiasing\" enum=\"org.gnome.settings-daemon.GsdFontAntialiasingMode\">"
deprecated_match="  <schema id=\"org.gnome.settings-daemon.plugins.xsettings.deprecated\">"


target_line=`grep -n "$target_match" "$file" | sed -n 's/:.*//p'`
deprecated_line=`grep -n "$deprecated_match" "$file" | sed -n 's/:.*//p'`

if [[ "$target_line" == "" ]]; then
    echo "No antialising line found in $file"
    echo "This pre-compiled version of mrv2 might not be compatible with"
    echo "your newer Linux Wayland distribution.  You can still probably"
    echo "use it under X11."
    echo "If you need Wayland support, you should compile from source."
    exit 0
fi

if [[ "$deprecated_line" == "" ]]; then
    echo "No need to patch $file"
    echo "No deprecated antialiasing line found."
else
    previous_line=$(($deprecated_line - 1))
    previous_line_match=`sed -n "${previous_line}"p "$file"`

    if [[ $previous_line_match == $previous_match ]]; then
	if [[ $((target_line - deprecated_line)) == 1 ]]; then
	    echo "Deprecated antialiasing found in $file"
	    echo "Must patch for newer Wayland."
	    backup="orig.before.mrv2"
	    cp "$file" "$backup"
	    sed "$deprecated_line"d "$backup" | sed "$previous_line"d > "$file"
	    if [[ -e $file ]]; then
		echo "$file fixed for Wayland"
		echo "$backup if the original file."
		glib-compile-schemas /usr/share/glib-2.0/schemas
		echo "Compiled glib schemas again."
	    else
		echo "$file was not fixed!"
	    fi
	fi
    fi
fi
