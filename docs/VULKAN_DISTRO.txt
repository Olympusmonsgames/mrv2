
a) Windows
==========

On Windows, you should distribute the following Vulkan-related libraries along with your application:

Vulkan Loader (if needed)

Users can install the Vulkan Runtime via the Vulkan SDK or get it from their GPU drivers.

If you want to ensure Vulkan runs without user intervention, distribute vulkan-1.dll (from the Vulkan SDK Bin directory) along with your application.

Shader Compilation & SPIR-V Processing

glslang.dll (from glslang)

shaderc_combined.dll (from Shaderc)

SPIRV-Tools.dll

If using SPIRV-Tools-opt, include SPIRV-Tools-opt.dll

Vulkan ICDs and Layers (Optional, for debugging)

Do not package GPU vendor-specific ICDs (e.g., NVIDIA, AMD, Intel Vulkan drivers). These come with the user's GPU driver.

If you need validation layers, package VkLayer_khronos_validation.dll, but this is only necessary for debugging.

b) Linux
========

On Linux, Vulkan libraries are typically provided by the system, but you may need to distribute some components for portability.

Vulkan Loader

Vulkan loader (libvulkan.so.1) should be installed via the system package manager (vulkan-loader on Debian/Ubuntu or vulkan-icd-loader on Fedora/Arch).

If you need to distribute it, you can package libvulkan.so.1 from the Vulkan SDK, but it's better to dynamically link against the system's loader.

Shader Compilation & SPIR-V Processing
--------------------------------------

libglslang.so
libshaderc_combined.so
libSPIRV-Tools.so
libSPIRV-Tools-opt.so (since you're using it on Linux)

Vulkan ICDs and Layers

Do not distribute vendor-specific ICDs (drivers).

Validation layers (libVkLayer_khronos_validation.so) should be installed by the user or provided separately for debugging.

Dependencies & RPath Considerations

If you bundle .so files, use rpath to ensure the application finds them ($ORIGIN for relative paths).

Example:

bash
patchelf --set-rpath '$ORIGIN' my_app

c) macOS (with MoltenVK)
========================

Since macOS does not natively support Vulkan, you need to distribute MoltenVK.

MoltenVK Runtime
----------------

Package libMoltenVK.dylib (from the Vulkan SDK).

Ensure your app loads this dynamically.

Vulkan Loader

Package libvulkan.1.dylib (from the Vulkan SDK).

Shader Compilation & SPIR-V Processing
--------------------------------------

libglslang.dylib

libshaderc_combined.dylib

libSPIRV-Tools.dylib

libSPIRV-Tools-opt.dylib (if using)

Dependencies & rpath Considerations
-----------------------------------

Use install_name_tool to ensure libraries are correctly referenced in your app bundle.

Example:

bash
----
install_name_tool -add_rpath @executable_path/../Frameworks my_app

Summary Table

Component		Windows (DLLs)		Linux (SO files)			macOS (dylibs)
Vulkan Loader		vulkan-1.dll (optional)	libvulkan.so.1 (system preferred)	libvulkan.1.dylib (required)
MoltenVK		N/A	     		N/A	       	       			libMoltenVK.dylib (required)
			glslang	glslang.dll	libglslang.so	libglslang.dylib
shaderc_combined	shaderc_combined.dll	libshaderc_combined.so			libshaderc_combined.dylib
SPIRV-Tools	SPIRV-Tools.dll			libSPIRV-Tools.so			libSPIRV-Tools.dylib
SPIRV-Tools-opt	SPIRV-Tools-opt.dll (optional)	libSPIRV-Tools-opt.so			libSPIRV-Tools-opt.dylib (if used)
Validation Layers	Debug only		Debug only				Debug only

Additional Notes
Dynamic Linking: Prefer dynamic linking (.dll, .so, .dylib) rather than static linking to ensure updates to these libraries (especially Vulkan loader) donâ€™t require redistributing the entire application.

Environment Variables: On Linux and macOS, ensure VK_ICD_FILENAMES and VK_LAYER_PATH are correctly set if you need to override Vulkan paths.

MoltenVK Licensing: If distributing MoltenVK, comply with its MIT license.

Would you like help with setting up automatic library bundling for your builds?
