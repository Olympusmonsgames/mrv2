# data file for the Fltk User Interface Designer (fluid)
version 1.0400
i18n_type 1
i18n_include {<libintl.h>}
i18n_conditional {}
i18n_gnu_function gettext
i18n_gnu_static_function gettext_noop
header_name {.h}
code_name {.cxx}
decl {\#include <string>} {public global
}

decl {\#include "mrvFl/mrvCallbacks.h"} {private local
}

decl {\#include "mrvFl/mrvOCIO.h"} {private local
}

decl {\#include "mrViewer.h"} {private local
}

class OCIOPresetsUI {open
} {
  decl {std::string presetName;} {private local
  }
  Function {make_window()} {open
  } {
    Fl_Window uiOCIOPrestsWindow {
      label {OCIO Presets}
      callback {delete mrv::OCIOPresetsClass;
mrv::OCIOPresetsClass = nullptr;
delete o;
ViewerUI* ui = mrv::App::ui;
ui->uiMain->fill_menu( ui->uiMenuBar );}
      xywh {578 262 495 511} type Double resizable visible
    } {
      Fl_Group {} {open
        xywh {0 0 495 511} box FLAT_BOX
      } {
        Fl_Group {} {open
          xywh {59 17 373 478}
        } {
          Fl_Menu_Button uiOCIOPreset {
            label Preset
            callback {const Fl_Menu_Item* item = o->mvalue();
if (!item || !item->label()) return;

const std::string& presetName = item->label();
mrv::ocio::setPreset(presetName);

o->label(item->label());

const std::string& summary = mrv::ocio::presetSummary(presetName);
uiOCIOSummary->copy_label(summary.c_str());}
            tooltip {Click to switch to a stored preset.} xywh {59 146 228 28}
          } {}
          Fl_Button {} {
            label Add
            user_data uiOCIOPreset user_data_type {Fl_Menu_Button*}
            callback {auto win = get_preset_name();
while (win->visible())
{
  Fl::check();
}

if (presetName.empty())
     return;
     

     
int x = v->size() - 2;  // 1 for last, 1 for nullptr
v->value(x);

if (x < 0)
{
  v->label(_("Preset"));
  return;
}

const Fl_Menu_Item& item = v->menu()[x];
if (!item.label()) return;

v->label(item.label());

const std::string& summary = mrv::ocio::presetSummary(presetName);
uiOCIOSummary->copy_label(summary.c_str());}
            tooltip {Click to add a new preset with the current settings.} xywh {298 146 64 28}
          }
          Fl_Button {} {
            label Delete
            user_data uiOCIOPreset user_data_type {Fl_Menu_Button*}
            callback {int x = v->value();
if (x < 0 || x >= v->size())
     return;

const Fl_Menu_Item& item = v->menu()[x];
if (!item.label()) return;

const std::string& presetName = item.label();
if (presetName.empty() || presetName == _("Preset"))
     return;

mrv::ocio::removePreset(presetName);

fill_ocio_presets();

uiOCIOSummary->label("");}
            tooltip {Click to delete the selected preset.} xywh {368 146 64 28}
          }
          Fl_Box {} {
            label {Select, Add or Delete an OCIO Preset that stores: config filename, Input Color Space, View, Look, LUT settings and Defaults for 8-bits, 16-bits, 32-bits, half and float images. }
            xywh {59 17 373 112} box BORDER_BOX align 128
          }
          Fl_Box {} {
            label Summary
            xywh {59 187 373 28}
          }
          Fl_Box uiOCIOSummary {
            xywh {59 215 373 280} box BORDER_BOX labelsize 12 align 85
          }
        }
      }
    }
    code {fill_ocio_presets();} {}
  }
  Function {get_preset_name()} {open
  } {
    Fl_Window uiPresetNameWindow {
      label {Preset Name}
      callback {presetName = uiPresetName->value();
delete o;} open
      xywh {857 535 440 102} type Double
      code0 {o->show();} modal visible
    } {
      Fl_Group {} {open
        xywh {0 0 440 102} box FLAT_BOX
      } {
        Fl_Group {} {open selected
          xywh {99 15 242 72}
        } {
          Fl_Input uiPresetName {
            xywh {99 15 242 32} color 20 textcolor 56
            code0 {presetName.clear();}
          }
          Fl_Button {} {
            label Cancel
            user_data uiPresetNameWindow user_data_type {Fl_Double_Window*}
            callback {presetName.clear();
delete v;}
            xywh {99 59 112 28}
          }
          Fl_Button {} {
            label Accept
            user_data uiPresetNameWindow user_data_type {Fl_Double_Window*}
            callback {presetName = uiPresetName->value();
if (presetName.empty())
    return;

mrv::ocio::createPreset(presetName);
fill_ocio_presets();

delete v;}
            xywh {231 59 110 28}
          }
        }
      }
    }
  }
  Function {fill_ocio_presets()} {} {
    code {auto presets = mrv::ocio::presetsList();

uiOCIOPreset->clear();

for (const auto& preset : presets)
{
  uiOCIOPreset->add(preset.c_str());
}

uiOCIOPreset->menu_end();
uiOCIOPreset->label(_("Preset"));} {}
  }
  Function {OCIOPresetsUI()} {} {
    code {auto w = make_window();
w->show();} {}
  }
}
